// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidborzek/tvhgo/tvheadend (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock_gen.go github.com/davidborzek/tvhgo/tvheadend Client
//

// Package mock_tvheadend is a generated GoMock package.
package mock_tvheadend

import (
	context "context"
	reflect "reflect"

	tvheadend "github.com/davidborzek/tvhgo/tvheadend"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockClient) Exec(arg0 context.Context, arg1 string, arg2 any, arg3 ...tvheadend.Query) (*tvheadend.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*tvheadend.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockClientMockRecorder) Exec(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockClient)(nil).Exec), varargs...)
}
