basePath: /api
definitions:
  api.createTokenRequest:
    properties:
      name:
        type: string
    type: object
  api.createUser:
    properties:
      displayName:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  api.tokenResponse:
    properties:
      token:
        type: string
    type: object
  api.twoFactorAuthActivateRequest:
    properties:
      code:
        type: string
      password:
        type: string
    type: object
  api.twoFactorAuthDeactivateRequest:
    properties:
      code:
        type: string
    type: object
  api.twoFactorAuthSetupRequest:
    properties:
      password:
        type: string
    type: object
  api.twoFactorAuthSetupResponse:
    properties:
      url:
        type: string
    type: object
  api.userUpdate:
    properties:
      displayName:
        type: string
      email:
        type: string
      username:
        type: string
    type: object
  api.userUpdatePassword:
    properties:
      currentPassword:
        type: string
      password:
        type: string
    type: object
  core.Channel:
    properties:
      enabled:
        type: boolean
      id:
        type: string
      name:
        type: string
      number:
        type: integer
      piconId:
        type: integer
    type: object
  core.CreateRecording:
    properties:
      channelId:
        description: ChannelID the channel id for the recording.
        type: string
      comment:
        description: Comment optional comment of the recording.
        type: string
      configId:
        description: ConfigID configuration id of the dvr config.
        type: string
      endPadding:
        description: |-
          EndPadding optional padding in minutes to record
          after the recording ends.
        type: integer
      endsAt:
        description: EndsAt end date of the recording as unix timestamp.
        type: integer
      extraText:
        description: ExtraText optional extraText of the recording.
        type: string
      priority:
        description: Priority priority of the recording.
        type: integer
      startPadding:
        description: |-
          StartPadding optional padding in minutes to record
          before the recording starts.
        type: integer
      startsAt:
        description: StartAt start date of the recording as unix timestamp.
        type: integer
      title:
        description: Title title of the recording.
        type: string
    type: object
  core.CreateRecordingByEvent:
    properties:
      configId:
        type: string
      eventId:
        type: integer
    type: object
  core.DVRConfig:
    properties:
      artwork:
        allOf:
        - $ref: '#/definitions/core.DVRConfigArtworkSettings'
        description: Artwork is the artwork settings for the DVR.
      clone:
        description: |-
          Clone indicates whether the scheduled entry should be cloned and re-recorded
          if the recording fails.
        type: boolean
      deleteAfterPlayback:
        description: |-
          DeleteAfterPlaybackTime defines the amount of time in seconds to keep the recording after playback.
          If set to 0, the recording will be kept indefinitely.
        type: integer
      enabled:
        description: Enabled indicates if the DVR is enabled.
        type: boolean
      endPadding:
        description: |-
          EndPadding optional padding in minutes to record
          after the recording ends.
        type: integer
      epg:
        allOf:
        - $ref: '#/definitions/core.DVRConfigEPGSettings'
        description: EPG is the EPG settings for the DVR.
      file:
        allOf:
        - $ref: '#/definitions/core.DVRConfigFileSettings'
        description: File is the file settings for the DVR.
      hooks:
        allOf:
        - $ref: '#/definitions/core.DVRConfigHooks'
        description: Hooks is the hooks settings for the DVR.
      id:
        description: ID is the unique identifier for the DVR configuration.
        type: string
      name:
        description: Name is the name of the DVR configuration.
        type: string
      original:
        description: Original indicates if the DVR configuration is the original.
        type: boolean
      priority:
        allOf:
        - $ref: '#/definitions/core.DVRConfigPriority'
        description: Priority is the priority of the DVR configuration.
      recordingFileRetention:
        allOf:
        - $ref: '#/definitions/core.DVRConfigRetentionPolicy'
        description: RecordingFileRetention is the retention policy for the recording
          file.
      recordingInfoRetention:
        allOf:
        - $ref: '#/definitions/core.DVRConfigRetentionPolicy'
        description: RecordingInfoRetention is the retention policy for the recording
          info.
      rerecordErrors:
        description: RerecordErrors defines the amount of errors that can occur before
          the recording is re-scheduled.
        type: integer
      startPadding:
        description: |-
          StartPadding optional padding in minutes to record
          before the recording starts.
        type: integer
      storage:
        allOf:
        - $ref: '#/definitions/core.DVRConfigStorageSettings'
        description: Storage is the storage settings for the DVR.
      streamProfileId:
        description: StreamProfileID is the unique identifier of the stream profile
          to use.
        type: string
      subdirectories:
        allOf:
        - $ref: '#/definitions/core.DVRConfigSubdirectorySettings'
        description: Subdirectories is the subdirectory settings for the DVR.
      tunerWarmUpTime:
        description: TunerWarmUpTime is the time in seconds to wait for the tuner
          to get ready for recording.
        type: integer
    type: object
  core.DVRConfigArtworkSettings:
    properties:
      allowUnidentifiableBroadcasts:
        description: AllowUnidentifiableBroadcasts indicates if artwork should be
          fetched for broadcasts that cannot be identified.
        type: boolean
      commandLineOptions:
        description: CommandLineOptions are additional command line options to use
          when fetching artwork.
        type: string
      fetch:
        description: |-
          Fetch indicates if artwork should be fetched from installed providers.
          `tmdb` and `tvdb` must be correctly configured in the Tvheadend configuration.
        type: boolean
    type: object
  core.DVRConfigAutorecSettings:
    properties:
      maxCount:
        description: MaxCount is the maximum number of autorec that can be matched.
        type: integer
      maxSchedules:
        description: MaxSchedules is the maximum number of autorec that can be scheduled.
        type: integer
    type: object
  core.DVRConfigCacheScheme:
    enum:
    - unknown
    - system
    - do_not_keep
    - sync
    - sync_and_do_not_keep
    type: string
    x-enum-varnames:
    - DVRConfigCacheSchemeUnknown
    - DVRConfigCacheSchemeSystem
    - DVRConfigCacheSchemeDoNotKeep
    - DVRConfigCacheSchemeSync
    - DVRConfigCacheSchemeSyncAndDoNotKeep
  core.DVRConfigDuplicateHandling:
    enum:
    - record_all
    - all_epg_unique
    - all_different_episode
    - all_different_subtitle
    - all_different_description
    - all_once_per_month
    - all_once_per_week
    - all_once_per_day
    - local_different_episode
    - local_different_title
    - local_different_subtitle
    - local_different_description
    - local_once_per_month
    - local_once_per_week
    - local_once_per_day
    type: string
    x-enum-varnames:
    - DVRConfigDuplicateHandlingRecordAll
    - DVRConfigDuplicateHandlingRecordAllEpgUnique
    - DVRConfigDuplicateHandlingRecordAllDifferentEpisode
    - DVRConfigDuplicateHandlingRecordAllDifferentSubtitle
    - DVRConfigDuplicateHandlingRecordAllDifferentDescription
    - DVRConfigDuplicateHandlingRecordAllOncePerMonth
    - DVRConfigDuplicateHandlingRecordAllOncePerWeek
    - DVRConfigDuplicateHandlingRecordAllOncePerDay
    - DVRConfigDuplicateHandlingRecordLocalDifferentEpisode
    - DVRConfigDuplicateHandlingRecordLocalDifferentTitle
    - DVRConfigDuplicateHandlingRecordLocalDifferentSubtitle
    - DVRConfigDuplicateHandlingRecordLocalDifferentDescription
    - DVRConfigDuplicateHandlingRecordLocalOncePerMonth
    - DVRConfigDuplicateHandlingRecordLocalOncePerWeek
    - DVRConfigDuplicateHandlingRecordLocalOncePerDays
  core.DVRConfigEPGSettings:
    properties:
      autorec:
        allOf:
        - $ref: '#/definitions/core.DVRConfigAutorecSettings'
        description: Autorec is the autorec settings for the DVR.
      duplicateHandling:
        allOf:
        - $ref: '#/definitions/core.DVRConfigDuplicateHandling'
        description: DuplicateHandling defines the duplicate recording handling.
      epgRunning:
        description: |-
          EpgRunning indicates if EITp/f should be used to decide event start and stop.
          Also known as "Accurate Recording".
        type: boolean
      epgUpdateWindow:
        description: |-
          EpgUpdateWindow is the maximum allowed difference between the event start time
          when the epg event is changed.
        type: integer
      skipCommercials:
        description: SkipCommercials indicates if commercials should be skipped.
        type: boolean
    type: object
  core.DVRConfigFileSettings:
    properties:
      allowWhitespace:
        description: AllowWhitespace indicates if whitespace should be included in
          the title.
        type: boolean
      cleanTitle:
        description: CleanTitle indicates if the title should be cleaned.
        type: boolean
      includeChannel:
        description: |-
          IncludeChannel indicates if the channel should be included in the title.
          This applies fot the filename and the title in tag stored in the file.
        type: boolean
      includeDate:
        description: |-
          IncludeDate indicates if the date should be included in the title.
          This applies fot the filename and the title in tag stored in the file.
        type: boolean
      includeEpisode:
        description: IncludeEpisode indicates if the episode should be included in
          the title when available.
        type: boolean
      includeSubtitle:
        description: IncludeSubtitle indicates if the subtitle should be included
          in the title when available.
        type: boolean
      includeTime:
        description: |-
          IncludeTime indicates if the time should be included in the title.
          This applies fot the filename and the title in tag stored in the file.
        type: boolean
      omitTitle:
        description: OmitTitle indicates if the title should be omitted.
        type: boolean
      tagFiles:
        description: TagFiles indicates if the files should be tagged with metadata.
        type: boolean
      windowsCompatibleFilename:
        description: WindowsCompatibleFilename indicates if the filename should be
          Windows compatible.
        type: boolean
    type: object
  core.DVRConfigHooks:
    properties:
      remove:
        description: Remove is the command to run when the DVR removes a recording.
        type: string
      start:
        description: Start is the command to run when the DVR starts recording.
        type: string
      stop:
        description: Stop is the command to run when the DVR stops recording.
        type: string
    type: object
  core.DVRConfigPriority:
    enum:
    - important
    - high
    - normal
    - low
    - unimportant
    - default
    - unknown
    type: string
    x-enum-varnames:
    - DVRConfigPriorityImportant
    - DVRConfigPriorityHigh
    - DVRConfigPriorityNormal
    - DVRConfigPriorityLow
    - DVRConfigPriorityUnimportant
    - DVRConfigPriorityDefault
    - DVRConfigPriorityUnknown
  core.DVRConfigRetentionPolicy:
    properties:
      days:
        description: Days is the amount of days to keep the recording info.
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/core.DVRConfigRetentionType'
        description: Type is the type of retention policy.
    type: object
  core.DVRConfigRetentionType:
    enum:
    - forever
    - days
    - maintained_space
    - on_file_removal
    type: string
    x-enum-varnames:
    - DVRConfigRetentionTypeForever
    - DVRConfigRetentionTypeDays
    - DVRConfigRetentionTypeMaintainedSpace
    - DVRConfigRetentionTypeOnFileRemoval
  core.DVRConfigStorageSettings:
    properties:
      cacheScheme:
        allOf:
        - $ref: '#/definitions/core.DVRConfigCacheScheme'
        description: CacheScheme is the cache scheme to use/used to store recordings.
      charset:
        description: Charset is the character set to use for the filenames.
        type: string
      directoryPermissions:
        description: DirectoryPermissions is the permissions to create new directories
          with.
        type: string
      filePermissions:
        description: FilePermissions is the permissions to create new files with.
        type: string
      maintainFreeSpace:
        description: MaintainFreeSpace is the amount of free space to maintain on
          the storage path.
        type: integer
      maintainUsedSpace:
        description: MaintainUsedSpace is the amount of used space to maintain on
          the storage path.
        type: integer
      path:
        description: Path is the path where the recording should be stored.
        type: string
      pathnameFormat:
        description: |-
          PathnameFormat is the format of the pathname.
          See Tvheadend Help for more information.
        type: string
    type: object
  core.DVRConfigSubdirectorySettings:
    properties:
      channelSubdir:
        description: |-
          ChannelSubdir indicates if a new directory should be created for each channel.
          If this and `daySubdir` are both enabled, the channel directory will be created inside the day directory.
        type: boolean
      daySubdir:
        description: |-
          DaySubdir indicates if a new directory should be created for each day.
          It will only be created when something is recorded. The format is ISO Standard (YYYY-MM-DD).
        type: boolean
      titleSubdir:
        description: |-
          TitleSubdir indicates if a new directory should be created for each title.
          If this, `daySubdir` and `channelSubdir` are all enabled, the title directory will be created inside the channel directory.
        type: boolean
      tvMoviesSubdirFormat:
        description: |-
          TvMoviesSubdirFormat is the subdirectory format for tvmovies when using the $q specifier.
          This can contain only alphanumeric characters (A-Za-z0-9).
        type: string
      tvShowsSubdirFormat:
        description: |-
          TvhshowsSubdirFormat is the subdirectory format for tvshows when using the $q specifier.
          This can contain only alphanumeric characters (A-Za-z0-9).
        type: string
    type: object
  core.EpgChannel:
    properties:
      channelId:
        type: string
      channelName:
        type: string
      channelNumber:
        type: integer
      events:
        items:
          $ref: '#/definitions/core.EpgEvent'
        type: array
      piconId:
        type: integer
    type: object
  core.EpgContentType:
    properties:
      id:
        type: integer
      string:
        type: string
    type: object
  core.EpgEvent:
    properties:
      audioDesc:
        type: boolean
      channelId:
        type: string
      channelName:
        type: string
      channelNumber:
        type: integer
      description:
        type: string
      dvrState:
        type: string
      dvrUuid:
        type: string
      endsAt:
        type: integer
      hd:
        type: boolean
      id:
        type: integer
      nextEventId:
        type: integer
      piconId:
        type: integer
      startsAt:
        type: integer
      subtitle:
        type: string
      subtitled:
        type: boolean
      title:
        type: string
      widescreen:
        type: boolean
    type: object
  core.ListResult-core_EpgChannel:
    properties:
      entries:
        items:
          $ref: '#/definitions/core.EpgChannel'
        type: array
      offset:
        type: integer
      total:
        type: integer
    type: object
  core.Recording:
    properties:
      channelId:
        type: string
      channelName:
        type: string
      createdAt:
        type: integer
      description:
        type: string
      duration:
        type: integer
      enabled:
        type: boolean
      endPadding:
        description: |-
          EndPadding optional padding in minutes to record
          after the recording ends.
        type: integer
      endsAt:
        description: EndsAt end date of the recording as unix timestamp.
        type: integer
      eventId:
        description: ID of the event when the recordings was created by event.
        type: integer
      extraText:
        type: string
      filename:
        type: string
      id:
        type: string
      langTitle:
        additionalProperties:
          type: string
        type: object
      originalEndsAt:
        description: |-
          OriginalEndsAt time stamp of the original end date
          without theEndPadding.
        type: integer
      originalStartsAt:
        description: |-
          OriginalStartsAt time stamp of the original start date
          without StartPadding.
        type: integer
      piconId:
        type: integer
      startPadding:
        description: |-
          StartPadding optional padding in minutes to record
          before the recording starts.
        type: integer
      startsAt:
        description: StartAt start date of the recording as unix timestamp.
        type: integer
      status:
        type: string
      subtitle:
        type: string
      title:
        type: string
    type: object
  core.RecordingListResult:
    properties:
      entries:
        items:
          $ref: '#/definitions/core.Recording'
        type: array
      offset:
        type: integer
      total:
        type: integer
    type: object
  core.Session:
    properties:
      clientIp:
        type: string
      createdAt:
        type: integer
      id:
        type: integer
      lastUsedAt:
        type: integer
      userAgent:
        type: string
      userId:
        type: integer
    type: object
  core.StreamProfile:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  core.Token:
    properties:
      createdAt:
        type: integer
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: integer
    type: object
  core.TwoFactorSettings:
    properties:
      enabled:
        type: boolean
    type: object
  core.UpdateRecording:
    properties:
      comment:
        description: Comment optional comment of the recording.
        type: string
      enabled:
        description: Enabled enabled status of the recording.
        type: boolean
      endPadding:
        description: |-
          EndPadding optional padding in minutes to record
          after the recording ends.
        type: integer
      endsAt:
        description: EndsAt end date of the recording as unix timestamp.
        type: integer
      episode:
        description: Episode episode of the recording.
        type: string
      extraText:
        description: ExtraText optional extraText of the recording.
        type: string
      priority:
        description: Priority priority of the recording.
        type: integer
      startPadding:
        description: |-
          StartPadding optional padding in minutes to record
          before the recording starts.
        type: integer
      startsAt:
        description: StartAt start date of the recording as unix timestamp.
        type: integer
      title:
        description: Title title of the recording.
        type: string
    type: object
  core.User:
    properties:
      createdAt:
        type: integer
      displayName:
        type: string
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: integer
      username:
        type: string
    type: object
  core.UserListResult:
    properties:
      entries:
        items:
          $ref: '#/definitions/core.User'
        type: array
      offset:
        type: integer
      total:
        type: integer
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
  description: tvhgo REST API documentation.
  title: tvhgo
  version: "1.0"
paths:
  /channels:
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort key
        in: query
        name: sort_key
        type: string
      - description: Sort direction
        in: query
        name: sort_dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.Channel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get list of channels
      tags:
      - channels
  /channels/{id}:
    get:
      parameters:
      - description: Channel id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Channel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get a channel by id
      tags:
      - channels
  /channels/{number}/stream:
    get:
      parameters:
      - description: Channel number
        in: path
        name: number
        required: true
        type: string
      - description: Streaming profile
        in: query
        name: profile
        type: string
      produces:
      - video/*
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Stream a channel by channel number
      tags:
      - channels
  /dvr/config:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.DVRConfig'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get list of dvr configs
      tags:
      - dvr
  /dvr/config/{id}:
    delete:
      parameters:
      - description: DVR config ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Deletes a dvr config by id
      tags:
      - dvr
    get:
      parameters:
      - description: DVR Config ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.DVRConfig'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a dvr configs by id
      tags:
      - dvr
  /epg:
    get:
      parameters:
      - description: Sort key
        in: query
        name: sort_key
        type: string
      - description: Sort direction
        in: query
        name: sort_dir
        type: string
      - description: Start timestamp
        in: query
        name: startsAt
        type: integer
      - description: End timestamp
        in: query
        name: endsAt
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.ListResult-core_EpgChannel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get epg
      tags:
      - epg
  /epg/content-types:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.EpgContentType'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get epg content types
      tags:
      - epg
  /epg/events:
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort key
        in: query
        name: sort_key
        type: string
      - description: Sort direction
        in: query
        name: sort_dir
        type: string
      - description: Title
        in: query
        name: title
        type: string
      - description: Enable full test search
        in: query
        name: fullText
        type: boolean
      - description: Language
        in: query
        name: lang
        type: string
      - description: Now playing
        in: query
        name: nowPlaying
        type: boolean
      - description: Channel name or channel id
        in: query
        name: channel
        type: string
      - description: Content type
        in: query
        name: contentType
        type: string
      - description: Minimum Duration
        in: query
        name: durationMin
        type: integer
      - description: Maximum Duration
        in: query
        name: durationMax
        type: integer
      - description: Start timestamp
        in: query
        name: startsAt
        type: integer
      - description: End timestamp
        in: query
        name: endsAt
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.EpgEvent'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get epg events
      tags:
      - epg
  /epg/events/{id}:
    get:
      parameters:
      - description: Event id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.EpgEvent'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get a epg event by id
      tags:
      - epg
  /epg/events/{id}/related:
    get:
      parameters:
      - description: Event id
        in: path
        name: id
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort key
        in: query
        name: sort_key
        type: string
      - description: Sort direction
        in: query
        name: sort_dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.EpgEvent'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get related epg events
      tags:
      - epg
  /picon/{id}:
    get:
      parameters:
      - description: Picon id
        in: path
        name: id
        required: true
        type: string
      produces:
      - image/*
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get channel picon
      tags:
      - picon
  /profiles/stream:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.StreamProfile'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get list of stream profiles
      tags:
      - profiles
  /recordings:
    delete:
      parameters:
      - collectionFormat: multi
        description: recording ids
        in: query
        items:
          type: string
        name: ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Remove multiple recordings
      tags:
      - recordings
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort key
        in: query
        name: sort_key
        type: string
      - description: Sort direction
        in: query
        name: sort_dir
        type: string
      - description: Recording status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.RecordingListResult'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get list of recordings
      tags:
      - recordings
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.CreateRecording'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Create a recording
      tags:
      - recordings
  /recordings/{id}:
    delete:
      parameters:
      - description: Recording id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Removes a recording
      tags:
      - recordings
    get:
      parameters:
      - description: Recording id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Recording'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get a recording by id
      tags:
      - recordings
    patch:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.UpdateRecording'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Updates a recording
      tags:
      - recordings
  /recordings/{id}/cancel:
    put:
      parameters:
      - description: Recording id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Cancels a recording
      tags:
      - recordings
  /recordings/{id}/move/{dest}:
    put:
      parameters:
      - description: Recording id
        in: path
        name: id
        required: true
        type: string
      - description: Recording id
        in: path
        name: dest
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Moves a recording
      tags:
      - recordings
  /recordings/{id}/stop:
    put:
      parameters:
      - description: Recording id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Stops a recording
      tags:
      - recordings
  /recordings/{id}/stream:
    get:
      parameters:
      - description: Recording id
        in: path
        name: id
        required: true
        type: string
      produces:
      - video/*
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Stream a recording
      tags:
      - recordings
  /recordings/cancel:
    put:
      parameters:
      - collectionFormat: multi
        description: recording ids
        in: query
        items:
          type: string
        name: ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Cancel multiple recordings
      tags:
      - recordings
  /recordings/event:
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.CreateRecordingByEvent'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Create a recording by a event
      tags:
      - recordings
  /recordings/stop:
    put:
      parameters:
      - collectionFormat: multi
        description: recording ids
        in: query
        items:
          type: string
        name: ids
        required: true
        type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Stop multiple recordings
      tags:
      - recordings
  /sessions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.Session'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get list of sessions for the current user
      tags:
      - sessions
  /sessions/{id}:
    delete:
      parameters:
      - description: Session id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Revokes a session
      tags:
      - sessions
  /tokens:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.Token'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get list of tokens for the current user
      tags:
      - tokens
    post:
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.createTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.tokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Creates an api token
      tags:
      - tokens
  /tokens/{id}:
    delete:
      parameters:
      - description: Token ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Revokes a token
      tags:
      - tokens
  /two-factor-auth:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.TwoFactorSettings'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get the two factor auth settings for the current user
      tags:
      - two-factor-auth
  /two-factor-auth/activate:
    put:
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.twoFactorAuthActivateRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Activates two factor auth for the current user
      tags:
      - two-factor-auth
  /two-factor-auth/deactivate:
    put:
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.twoFactorAuthDeactivateRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Deactivates two factor auth for the current user
      tags:
      - two-factor-auth
  /two-factor-auth/setup:
    put:
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.twoFactorAuthSetupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.twoFactorAuthSetupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Starts the two factor auth setup for the current user
      tags:
      - two-factor-auth
  /user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Get the current user
      tags:
      - user
    patch:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.userUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Updates the current user
      tags:
      - user
  /user/password:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.userUpdatePassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - JWT: []
      summary: Updates the password of the current user
      tags:
      - user
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/core.UserListResult'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a list of users
      tags:
      - user
    post:
      consumes:
      - application/json
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.createUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/core.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Creates a new user
      tags:
      - user
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Deletes a user
      tags:
      - user
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a user by ID
      tags:
      - user
swagger: "2.0"
