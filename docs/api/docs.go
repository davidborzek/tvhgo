// Code generated by swaggo/swag. DO NOT EDIT.

package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/channels": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get list of channels",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort key",
                        "name": "sort_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Channel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channels/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Get a channel by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.Channel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/channels/{number}/stream": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "video/*",
                    "application/json"
                ],
                "tags": [
                    "channels"
                ],
                "summary": "Stream a channel by channel number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel number",
                        "name": "number",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Streaming profile",
                        "name": "profile",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dvr/config": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dvr"
                ],
                "summary": "Get list of dvr configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.DVRConfig"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dvr/config/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dvr"
                ],
                "summary": "Get a dvr configs by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DVR Config ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.DVRConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dvr"
                ],
                "summary": "Deletes a dvr config by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DVR config ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/epg": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Get epg",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort key",
                        "name": "sort_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start timestamp",
                        "name": "startsAt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End timestamp",
                        "name": "endsAt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.ListResult-core_EpgChannel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/epg/content-types": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Get epg content types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.EpgContentType"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/epg/events": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Get epg events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort key",
                        "name": "sort_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Enable full test search",
                        "name": "fullText",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language",
                        "name": "lang",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Now playing",
                        "name": "nowPlaying",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Channel name or channel id",
                        "name": "channel",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Content type",
                        "name": "contentType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum Duration",
                        "name": "durationMin",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum Duration",
                        "name": "durationMax",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Start timestamp",
                        "name": "startsAt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End timestamp",
                        "name": "endsAt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.EpgEvent"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/epg/events/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Get a epg event by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.EpgEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/epg/events/{id}/related": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Get related epg events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort key",
                        "name": "sort_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.EpgEvent"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/picon/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "image/*",
                    "application/json"
                ],
                "tags": [
                    "picon"
                ],
                "summary": "Get channel picon",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Picon id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profiles/stream": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profiles"
                ],
                "summary": "Get list of stream profiles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.StreamProfile"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Get list of recordings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort key",
                        "name": "sort_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort direction",
                        "name": "sort_dir",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Recording status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.RecordingListResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Create a recording",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.CreateRecording"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Remove multiple recordings",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "recording ids",
                        "name": "ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/cancel": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Cancel multiple recordings",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "recording ids",
                        "name": "ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/event": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Create a recording by a event",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.CreateRecordingByEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/stop": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Stop multiple recordings",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "recording ids",
                        "name": "ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Get a recording by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.Recording"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Removes a recording",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Updates a recording",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.UpdateRecording"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/{id}/cancel": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Cancels a recording",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/{id}/move/{dest}": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Moves a recording",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "dest",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/{id}/stop": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Stops a recording",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/recordings/{id}/stream": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "video/*",
                    "application/json"
                ],
                "tags": [
                    "recordings"
                ],
                "summary": "Stream a recording",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recording id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get list of sessions for the current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Session"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Revokes a session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Session id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Get list of tokens for the current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Token"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Creates an api token",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.tokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tokens/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Revokes a token",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/two-factor-auth": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "two-factor-auth"
                ],
                "summary": "Get the two factor auth settings for the current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.TwoFactorSettings"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/two-factor-auth/activate": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "two-factor-auth"
                ],
                "summary": "Activates two factor auth for the current user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.twoFactorAuthActivateRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/two-factor-auth/deactivate": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "two-factor-auth"
                ],
                "summary": "Deactivates two factor auth for the current user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.twoFactorAuthDeactivateRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/two-factor-auth/setup": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "two-factor-auth"
                ],
                "summary": "Starts the two factor auth setup for the current user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.twoFactorAuthSetupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.twoFactorAuthSetupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get the current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updates the current user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.userUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updates the password of the current user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.userUpdatePassword"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get a list of users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.UserListResult"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Creates a new user",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/core.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Deletes a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/sessions": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get list of session for a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Session"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}/sessions/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Revokes a session for a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Session id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.createTokenRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "api.createUser": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.tokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "api.twoFactorAuthActivateRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.twoFactorAuthDeactivateRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "api.twoFactorAuthSetupRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "api.twoFactorAuthSetupResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "api.userUpdate": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.userUpdatePassword": {
            "type": "object",
            "properties": {
                "currentPassword": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "core.Channel": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "piconId": {
                    "type": "integer"
                }
            }
        },
        "core.CreateRecording": {
            "type": "object",
            "properties": {
                "channelId": {
                    "description": "ChannelID the channel id for the recording.",
                    "type": "string"
                },
                "comment": {
                    "description": "Comment optional comment of the recording.",
                    "type": "string"
                },
                "configId": {
                    "description": "ConfigID configuration id of the dvr config.",
                    "type": "string"
                },
                "endPadding": {
                    "description": "EndPadding optional padding in minutes to record\nafter the recording ends.",
                    "type": "integer"
                },
                "endsAt": {
                    "description": "EndsAt end date of the recording as unix timestamp.",
                    "type": "integer"
                },
                "extraText": {
                    "description": "ExtraText optional extraText of the recording.",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority priority of the recording.",
                    "type": "integer"
                },
                "startPadding": {
                    "description": "StartPadding optional padding in minutes to record\nbefore the recording starts.",
                    "type": "integer"
                },
                "startsAt": {
                    "description": "StartAt start date of the recording as unix timestamp.",
                    "type": "integer"
                },
                "title": {
                    "description": "Title title of the recording.",
                    "type": "string"
                }
            }
        },
        "core.CreateRecordingByEvent": {
            "type": "object",
            "properties": {
                "configId": {
                    "type": "string"
                },
                "eventId": {
                    "type": "integer"
                }
            }
        },
        "core.DVRConfig": {
            "type": "object",
            "properties": {
                "artwork": {
                    "description": "Artwork is the artwork settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigArtworkSettings"
                        }
                    ]
                },
                "clone": {
                    "description": "Clone indicates whether the scheduled entry should be cloned and re-recorded\nif the recording fails.",
                    "type": "boolean"
                },
                "deleteAfterPlayback": {
                    "description": "DeleteAfterPlaybackTime defines the amount of time in seconds to keep the recording after playback.\nIf set to 0, the recording will be kept indefinitely.",
                    "type": "integer"
                },
                "enabled": {
                    "description": "Enabled indicates if the DVR is enabled.",
                    "type": "boolean"
                },
                "endPadding": {
                    "description": "EndPadding optional padding in minutes to record\nafter the recording ends.",
                    "type": "integer"
                },
                "epg": {
                    "description": "EPG is the EPG settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigEPGSettings"
                        }
                    ]
                },
                "file": {
                    "description": "File is the file settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigFileSettings"
                        }
                    ]
                },
                "hooks": {
                    "description": "Hooks is the hooks settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigHooks"
                        }
                    ]
                },
                "id": {
                    "description": "ID is the unique identifier for the DVR configuration.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the DVR configuration.",
                    "type": "string"
                },
                "original": {
                    "description": "Original indicates if the DVR configuration is the original.",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Priority is the priority of the DVR configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigPriority"
                        }
                    ]
                },
                "recordingFileRetention": {
                    "description": "RecordingFileRetention is the retention policy for the recording file.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigRetentionPolicy"
                        }
                    ]
                },
                "recordingInfoRetention": {
                    "description": "RecordingInfoRetention is the retention policy for the recording info.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigRetentionPolicy"
                        }
                    ]
                },
                "rerecordErrors": {
                    "description": "RerecordErrors defines the amount of errors that can occur before the recording is re-scheduled.",
                    "type": "integer"
                },
                "startPadding": {
                    "description": "StartPadding optional padding in minutes to record\nbefore the recording starts.",
                    "type": "integer"
                },
                "storage": {
                    "description": "Storage is the storage settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigStorageSettings"
                        }
                    ]
                },
                "streamProfileId": {
                    "description": "StreamProfileID is the unique identifier of the stream profile to use.",
                    "type": "string"
                },
                "subdirectories": {
                    "description": "Subdirectories is the subdirectory settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigSubdirectorySettings"
                        }
                    ]
                },
                "tunerWarmUpTime": {
                    "description": "TunerWarmUpTime is the time in seconds to wait for the tuner to get ready for recording.",
                    "type": "integer"
                }
            }
        },
        "core.DVRConfigArtworkSettings": {
            "type": "object",
            "properties": {
                "allowUnidentifiableBroadcasts": {
                    "description": "AllowUnidentifiableBroadcasts indicates if artwork should be fetched for broadcasts that cannot be identified.",
                    "type": "boolean"
                },
                "commandLineOptions": {
                    "description": "CommandLineOptions are additional command line options to use when fetching artwork.",
                    "type": "string"
                },
                "fetch": {
                    "description": "Fetch indicates if artwork should be fetched from installed providers.\n` + "`" + `tmdb` + "`" + ` and ` + "`" + `tvdb` + "`" + ` must be correctly configured in the Tvheadend configuration.",
                    "type": "boolean"
                }
            }
        },
        "core.DVRConfigAutorecSettings": {
            "type": "object",
            "properties": {
                "maxCount": {
                    "description": "MaxCount is the maximum number of autorec that can be matched.",
                    "type": "integer"
                },
                "maxSchedules": {
                    "description": "MaxSchedules is the maximum number of autorec that can be scheduled.",
                    "type": "integer"
                }
            }
        },
        "core.DVRConfigCacheScheme": {
            "type": "string",
            "enum": [
                "unknown",
                "system",
                "do_not_keep",
                "sync",
                "sync_and_do_not_keep"
            ],
            "x-enum-varnames": [
                "DVRConfigCacheSchemeUnknown",
                "DVRConfigCacheSchemeSystem",
                "DVRConfigCacheSchemeDoNotKeep",
                "DVRConfigCacheSchemeSync",
                "DVRConfigCacheSchemeSyncAndDoNotKeep"
            ]
        },
        "core.DVRConfigDuplicateHandling": {
            "type": "string",
            "enum": [
                "record_all",
                "all_epg_unique",
                "all_different_episode",
                "all_different_subtitle",
                "all_different_description",
                "all_once_per_month",
                "all_once_per_week",
                "all_once_per_day",
                "local_different_episode",
                "local_different_title",
                "local_different_subtitle",
                "local_different_description",
                "local_once_per_month",
                "local_once_per_week",
                "local_once_per_day"
            ],
            "x-enum-varnames": [
                "DVRConfigDuplicateHandlingRecordAll",
                "DVRConfigDuplicateHandlingRecordAllEpgUnique",
                "DVRConfigDuplicateHandlingRecordAllDifferentEpisode",
                "DVRConfigDuplicateHandlingRecordAllDifferentSubtitle",
                "DVRConfigDuplicateHandlingRecordAllDifferentDescription",
                "DVRConfigDuplicateHandlingRecordAllOncePerMonth",
                "DVRConfigDuplicateHandlingRecordAllOncePerWeek",
                "DVRConfigDuplicateHandlingRecordAllOncePerDay",
                "DVRConfigDuplicateHandlingRecordLocalDifferentEpisode",
                "DVRConfigDuplicateHandlingRecordLocalDifferentTitle",
                "DVRConfigDuplicateHandlingRecordLocalDifferentSubtitle",
                "DVRConfigDuplicateHandlingRecordLocalDifferentDescription",
                "DVRConfigDuplicateHandlingRecordLocalOncePerMonth",
                "DVRConfigDuplicateHandlingRecordLocalOncePerWeek",
                "DVRConfigDuplicateHandlingRecordLocalOncePerDays"
            ]
        },
        "core.DVRConfigEPGSettings": {
            "type": "object",
            "properties": {
                "autorec": {
                    "description": "Autorec is the autorec settings for the DVR.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigAutorecSettings"
                        }
                    ]
                },
                "duplicateHandling": {
                    "description": "DuplicateHandling defines the duplicate recording handling.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigDuplicateHandling"
                        }
                    ]
                },
                "epgRunning": {
                    "description": "EpgRunning indicates if EITp/f should be used to decide event start and stop.\nAlso known as \"Accurate Recording\".",
                    "type": "boolean"
                },
                "epgUpdateWindow": {
                    "description": "EpgUpdateWindow is the maximum allowed difference between the event start time\nwhen the epg event is changed.",
                    "type": "integer"
                },
                "skipCommercials": {
                    "description": "SkipCommercials indicates if commercials should be skipped.",
                    "type": "boolean"
                }
            }
        },
        "core.DVRConfigFileSettings": {
            "type": "object",
            "properties": {
                "allowWhitespace": {
                    "description": "AllowWhitespace indicates if whitespace should be included in the title.",
                    "type": "boolean"
                },
                "cleanTitle": {
                    "description": "CleanTitle indicates if the title should be cleaned.",
                    "type": "boolean"
                },
                "includeChannel": {
                    "description": "IncludeChannel indicates if the channel should be included in the title.\nThis applies fot the filename and the title in tag stored in the file.",
                    "type": "boolean"
                },
                "includeDate": {
                    "description": "IncludeDate indicates if the date should be included in the title.\nThis applies fot the filename and the title in tag stored in the file.",
                    "type": "boolean"
                },
                "includeEpisode": {
                    "description": "IncludeEpisode indicates if the episode should be included in the title when available.",
                    "type": "boolean"
                },
                "includeSubtitle": {
                    "description": "IncludeSubtitle indicates if the subtitle should be included in the title when available.",
                    "type": "boolean"
                },
                "includeTime": {
                    "description": "IncludeTime indicates if the time should be included in the title.\nThis applies fot the filename and the title in tag stored in the file.",
                    "type": "boolean"
                },
                "omitTitle": {
                    "description": "OmitTitle indicates if the title should be omitted.",
                    "type": "boolean"
                },
                "tagFiles": {
                    "description": "TagFiles indicates if the files should be tagged with metadata.",
                    "type": "boolean"
                },
                "windowsCompatibleFilename": {
                    "description": "WindowsCompatibleFilename indicates if the filename should be Windows compatible.",
                    "type": "boolean"
                }
            }
        },
        "core.DVRConfigHooks": {
            "type": "object",
            "properties": {
                "remove": {
                    "description": "Remove is the command to run when the DVR removes a recording.",
                    "type": "string"
                },
                "start": {
                    "description": "Start is the command to run when the DVR starts recording.",
                    "type": "string"
                },
                "stop": {
                    "description": "Stop is the command to run when the DVR stops recording.",
                    "type": "string"
                }
            }
        },
        "core.DVRConfigPriority": {
            "type": "string",
            "enum": [
                "important",
                "high",
                "normal",
                "low",
                "unimportant",
                "default",
                "unknown"
            ],
            "x-enum-varnames": [
                "DVRConfigPriorityImportant",
                "DVRConfigPriorityHigh",
                "DVRConfigPriorityNormal",
                "DVRConfigPriorityLow",
                "DVRConfigPriorityUnimportant",
                "DVRConfigPriorityDefault",
                "DVRConfigPriorityUnknown"
            ]
        },
        "core.DVRConfigRetentionPolicy": {
            "type": "object",
            "properties": {
                "days": {
                    "description": "Days is the amount of days to keep the recording info.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is the type of retention policy.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigRetentionType"
                        }
                    ]
                }
            }
        },
        "core.DVRConfigRetentionType": {
            "type": "string",
            "enum": [
                "forever",
                "days",
                "maintained_space",
                "on_file_removal"
            ],
            "x-enum-varnames": [
                "DVRConfigRetentionTypeForever",
                "DVRConfigRetentionTypeDays",
                "DVRConfigRetentionTypeMaintainedSpace",
                "DVRConfigRetentionTypeOnFileRemoval"
            ]
        },
        "core.DVRConfigStorageSettings": {
            "type": "object",
            "properties": {
                "cacheScheme": {
                    "description": "CacheScheme is the cache scheme to use/used to store recordings.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.DVRConfigCacheScheme"
                        }
                    ]
                },
                "charset": {
                    "description": "Charset is the character set to use for the filenames.",
                    "type": "string"
                },
                "directoryPermissions": {
                    "description": "DirectoryPermissions is the permissions to create new directories with.",
                    "type": "string"
                },
                "filePermissions": {
                    "description": "FilePermissions is the permissions to create new files with.",
                    "type": "string"
                },
                "maintainFreeSpace": {
                    "description": "MaintainFreeSpace is the amount of free space to maintain on the storage path.",
                    "type": "integer"
                },
                "maintainUsedSpace": {
                    "description": "MaintainUsedSpace is the amount of used space to maintain on the storage path.",
                    "type": "integer"
                },
                "path": {
                    "description": "Path is the path where the recording should be stored.",
                    "type": "string"
                },
                "pathnameFormat": {
                    "description": "PathnameFormat is the format of the pathname.\nSee Tvheadend Help for more information.",
                    "type": "string"
                }
            }
        },
        "core.DVRConfigSubdirectorySettings": {
            "type": "object",
            "properties": {
                "channelSubdir": {
                    "description": "ChannelSubdir indicates if a new directory should be created for each channel.\nIf this and ` + "`" + `daySubdir` + "`" + ` are both enabled, the channel directory will be created inside the day directory.",
                    "type": "boolean"
                },
                "daySubdir": {
                    "description": "DaySubdir indicates if a new directory should be created for each day.\nIt will only be created when something is recorded. The format is ISO Standard (YYYY-MM-DD).",
                    "type": "boolean"
                },
                "titleSubdir": {
                    "description": "TitleSubdir indicates if a new directory should be created for each title.\nIf this, ` + "`" + `daySubdir` + "`" + ` and ` + "`" + `channelSubdir` + "`" + ` are all enabled, the title directory will be created inside the channel directory.",
                    "type": "boolean"
                },
                "tvMoviesSubdirFormat": {
                    "description": "TvMoviesSubdirFormat is the subdirectory format for tvmovies when using the $q specifier.\nThis can contain only alphanumeric characters (A-Za-z0-9).",
                    "type": "string"
                },
                "tvShowsSubdirFormat": {
                    "description": "TvhshowsSubdirFormat is the subdirectory format for tvshows when using the $q specifier.\nThis can contain only alphanumeric characters (A-Za-z0-9).",
                    "type": "string"
                }
            }
        },
        "core.EpgChannel": {
            "type": "object",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "channelName": {
                    "type": "string"
                },
                "channelNumber": {
                    "type": "integer"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.EpgEvent"
                    }
                },
                "piconId": {
                    "type": "integer"
                }
            }
        },
        "core.EpgContentType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "string": {
                    "type": "string"
                }
            }
        },
        "core.EpgEvent": {
            "type": "object",
            "properties": {
                "audioDesc": {
                    "type": "boolean"
                },
                "channelId": {
                    "type": "string"
                },
                "channelName": {
                    "type": "string"
                },
                "channelNumber": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "dvrState": {
                    "type": "string"
                },
                "dvrUuid": {
                    "type": "string"
                },
                "endsAt": {
                    "type": "integer"
                },
                "hd": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "nextEventId": {
                    "type": "integer"
                },
                "piconId": {
                    "type": "integer"
                },
                "startsAt": {
                    "type": "integer"
                },
                "subtitle": {
                    "type": "string"
                },
                "subtitled": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "widescreen": {
                    "type": "boolean"
                }
            }
        },
        "core.ListResult-core_EpgChannel": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.EpgChannel"
                    }
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "core.Recording": {
            "type": "object",
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "channelName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "endPadding": {
                    "description": "EndPadding optional padding in minutes to record\nafter the recording ends.",
                    "type": "integer"
                },
                "endsAt": {
                    "description": "EndsAt end date of the recording as unix timestamp.",
                    "type": "integer"
                },
                "eventId": {
                    "description": "ID of the event when the recordings was created by event.",
                    "type": "integer"
                },
                "extraText": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "langTitle": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "originalEndsAt": {
                    "description": "OriginalEndsAt time stamp of the original end date\nwithout theEndPadding.",
                    "type": "integer"
                },
                "originalStartsAt": {
                    "description": "OriginalStartsAt time stamp of the original start date\nwithout StartPadding.",
                    "type": "integer"
                },
                "piconId": {
                    "type": "integer"
                },
                "startPadding": {
                    "description": "StartPadding optional padding in minutes to record\nbefore the recording starts.",
                    "type": "integer"
                },
                "startsAt": {
                    "description": "StartAt start date of the recording as unix timestamp.",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "subtitle": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "core.RecordingListResult": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Recording"
                    }
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "core.Session": {
            "type": "object",
            "properties": {
                "clientIp": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lastUsedAt": {
                    "type": "integer"
                },
                "userAgent": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "core.StreamProfile": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "core.Token": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                }
            }
        },
        "core.TwoFactorSettings": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "core.UpdateRecording": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Comment optional comment of the recording.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enabled enabled status of the recording.",
                    "type": "boolean"
                },
                "endPadding": {
                    "description": "EndPadding optional padding in minutes to record\nafter the recording ends.",
                    "type": "integer"
                },
                "endsAt": {
                    "description": "EndsAt end date of the recording as unix timestamp.",
                    "type": "integer"
                },
                "episode": {
                    "description": "Episode episode of the recording.",
                    "type": "string"
                },
                "extraText": {
                    "description": "ExtraText optional extraText of the recording.",
                    "type": "string"
                },
                "priority": {
                    "description": "Priority priority of the recording.",
                    "type": "integer"
                },
                "startPadding": {
                    "description": "StartPadding optional padding in minutes to record\nbefore the recording starts.",
                    "type": "integer"
                },
                "startsAt": {
                    "description": "StartAt start date of the recording as unix timestamp.",
                    "type": "integer"
                },
                "title": {
                    "description": "Title title of the recording.",
                    "type": "string"
                }
            }
        },
        "core.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "twoFactor": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "core.UserListResult": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.User"
                    }
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "tvhgo",
	Description:      "tvhgo REST API documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
